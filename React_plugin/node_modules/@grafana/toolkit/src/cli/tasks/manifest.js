"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var task_1 = require("./task");
var fs_1 = tslib_1.__importDefault(require("fs"));
var path_1 = tslib_1.__importDefault(require("path"));
var execa_1 = tslib_1.__importDefault(require("execa"));
function getFilePaths(root, work, acc) {
    if (!acc) {
        acc = [];
    }
    var abs = (work !== null && work !== void 0 ? work : root);
    var files = fs_1.default.readdirSync(abs);
    files.forEach(function (file) {
        var f = path_1.default.join(abs, file);
        var stat = fs_1.default.statSync(f);
        if (stat.isDirectory()) {
            acc = getFilePaths(root, f, acc);
        }
        else {
            acc.push(f.substring(root.length + 1).replace('\\', '/'));
        }
    });
    return acc;
}
exports.getFilePaths = getFilePaths;
var manifestRunner = function (_a) {
    var folder = _a.folder;
    return tslib_1.__awaiter(void 0, void 0, void 0, function () {
        var filename, files, originalDir, stdout, GRAFANA_API_KEY, pluginPath, plugin, url;
        return tslib_1.__generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    filename = 'MANIFEST.txt';
                    files = getFilePaths(folder).filter(function (f) { return f !== filename; });
                    originalDir = __dirname;
                    process.chdir(folder);
                    return [4 /*yield*/, execa_1.default('sha1sum', files)];
                case 1:
                    stdout = (_b.sent()).stdout;
                    // Write the process output
                    fs_1.default.writeFileSync(path_1.default.join(folder, filename), stdout);
                    GRAFANA_API_KEY = process.env.GRAFANA_API_KEY;
                    if (GRAFANA_API_KEY) {
                        pluginPath = path_1.default.join(folder, 'plugin.json');
                        plugin = require(pluginPath);
                        url = "https://grafana.com/api/plugins/" + plugin.id + "/sign";
                        console.log("TODO: sign and save: " + url);
                    }
                    // Go back to where you were
                    process.chdir(originalDir);
                    console.log('Wrote manifest: ', filename);
                    return [2 /*return*/];
            }
        });
    });
};
exports.manifestTask = new task_1.Task('Build Manifest', manifestRunner);
//# sourceMappingURL=manifest.js.map