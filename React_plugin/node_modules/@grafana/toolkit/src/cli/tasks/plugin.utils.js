"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var task_1 = require("./task");
var pluginValidation_1 = require("../../config/utils/pluginValidation");
var githubRelease_1 = require("../utils/githubRelease");
var getPluginId_1 = require("../../config/utils/getPluginId");
var env_1 = require("../../plugins/env");
var useSpinner_1 = require("../utils/useSpinner");
var path = require("path");
// @ts-ignore
var execa = require("execa");
var releaseNotes = function () { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
    var stdout;
    return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, execa.shell("awk 'BEGIN {FS=\"##\"; RS=\"\"} FNR==3 {print; exit}' CHANGELOG.md")];
            case 1:
                stdout = (_a.sent()).stdout;
                return [2 /*return*/, stdout];
        }
    });
}); };
var checkoutBranch = function (branchName) { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
    var currentBranch, branchesAvailable;
    return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, execa.shell("git rev-parse --abbrev-ref HEAD")];
            case 1:
                currentBranch = _a.sent();
                return [4 /*yield*/, execa.shell("(git branch -a | grep " + branchName + " | grep -v remote) || echo 'No release found'")];
            case 2:
                branchesAvailable = _a.sent();
                if (currentBranch.stdout !== branchName) {
                    if (branchesAvailable.stdout.trim() === branchName) {
                        return [2 /*return*/, ['git', ['checkout', branchName]]];
                    }
                    else {
                        return [2 /*return*/, ['git', ['checkout', '-b', branchName]]];
                    }
                }
                return [2 /*return*/, []];
        }
    });
}); };
var gitUrlParse = function (url) {
    var matchResult = [];
    if (url.match(/^git@github.com/)) {
        // We have an ssh style url.
        matchResult = url.match(/^git@github.com:(.*?)\/(.*?)\.git/);
    }
    if (url.match(/^https:\/\/github.com\//)) {
        // We have an https style url
        matchResult = url.match(/^https:\/\/github.com\/(.*?)\/(.*?)\/.git/);
    }
    if (matchResult && matchResult.length > 2) {
        return {
            owner: matchResult[1],
            name: matchResult[2],
        };
    }
    throw "Coult not find a suitable git repository. Received [" + url + "]";
};
var prepareRelease = useSpinner_1.useSpinner('Preparing release', function (_a) {
    var dryrun = _a.dryrun, verbose = _a.verbose;
    return tslib_1.__awaiter(void 0, void 0, void 0, function () {
        var ciDir, distDir, distContentDir, pluginJsonFile, pluginVersion, GIT_EMAIL, GIT_USERNAME, githubPublishScript, _b, githubPublishScript_1, githubPublishScript_1_1, line, opts, command, args, stdout, ex_1, err, trueError, _c, _d, regex, e_1_1;
        var e_1, _e, e_2, _f;
        return tslib_1.__generator(this, function (_g) {
            switch (_g.label) {
                case 0:
                    ciDir = env_1.getCiFolder();
                    distDir = path.resolve(ciDir, 'dist');
                    distContentDir = path.resolve(distDir, getPluginId_1.getPluginId());
                    pluginJsonFile = path.resolve(distContentDir, 'plugin.json');
                    pluginVersion = pluginValidation_1.getPluginJson(pluginJsonFile).info.version;
                    GIT_EMAIL = 'eng@grafana.com';
                    GIT_USERNAME = 'CircleCI Automation';
                    _b = [['git', ['config', 'user.email', GIT_EMAIL]],
                        ['git', ['config', 'user.name', GIT_USERNAME]]];
                    return [4 /*yield*/, checkoutBranch("release-" + pluginVersion)];
                case 1:
                    githubPublishScript = _b.concat([
                        _g.sent(),
                        ['git', ['add', '--force', distDir], { dryrun: dryrun }],
                        [
                            'git',
                            ['commit', '-m', "automated release " + pluginVersion + " [skip ci]"],
                            {
                                dryrun: dryrun,
                                okOnError: [/nothing to commit/g, /nothing added to commit/g, /no changes added to commit/g],
                            },
                        ],
                        ['git', ['tag', '-f', pluginVersion]],
                        ['git', ['push', '-f', 'origin', "release-" + pluginVersion], { dryrun: dryrun }]
                    ]);
                    _g.label = 2;
                case 2:
                    _g.trys.push([2, 11, 12, 13]);
                    githubPublishScript_1 = tslib_1.__values(githubPublishScript), githubPublishScript_1_1 = githubPublishScript_1.next();
                    _g.label = 3;
                case 3:
                    if (!!githubPublishScript_1_1.done) return [3 /*break*/, 10];
                    line = githubPublishScript_1_1.value;
                    opts = line.length === 3 ? line[2] : {};
                    command = line[0];
                    args = line[1];
                    _g.label = 4;
                case 4:
                    _g.trys.push([4, 8, , 9]);
                    if (verbose) {
                        console.log('executing >>', line);
                    }
                    if (!(line.length > 0 && line[0].length > 0)) return [3 /*break*/, 6];
                    if (opts['dryrun']) {
                        line[1].push('--dry-run');
                    }
                    return [4 /*yield*/, execa(command, args)];
                case 5:
                    stdout = (_g.sent()).stdout;
                    if (verbose) {
                        console.log(stdout);
                    }
                    return [3 /*break*/, 7];
                case 6:
                    if (verbose) {
                        console.log('skipping empty line');
                    }
                    _g.label = 7;
                case 7: return [3 /*break*/, 9];
                case 8:
                    ex_1 = _g.sent();
                    err = ex_1.message;
                    if (opts['okOnError'] && Array.isArray(opts['okOnError'])) {
                        trueError = true;
                        try {
                            for (_c = (e_2 = void 0, tslib_1.__values(opts['okOnError'])), _d = _c.next(); !_d.done; _d = _c.next()) {
                                regex = _d.value;
                                if (err.match(regex)) {
                                    trueError = false;
                                    break;
                                }
                            }
                        }
                        catch (e_2_1) { e_2 = { error: e_2_1 }; }
                        finally {
                            try {
                                if (_d && !_d.done && (_f = _c.return)) _f.call(_c);
                            }
                            finally { if (e_2) throw e_2.error; }
                        }
                        if (!trueError) {
                            // This is not an error
                            return [3 /*break*/, 9];
                        }
                    }
                    console.error(err);
                    process.exit(-1);
                    return [3 /*break*/, 9];
                case 9:
                    githubPublishScript_1_1 = githubPublishScript_1.next();
                    return [3 /*break*/, 3];
                case 10: return [3 /*break*/, 13];
                case 11:
                    e_1_1 = _g.sent();
                    e_1 = { error: e_1_1 };
                    return [3 /*break*/, 13];
                case 12:
                    try {
                        if (githubPublishScript_1_1 && !githubPublishScript_1_1.done && (_e = githubPublishScript_1.return)) _e.call(githubPublishScript_1);
                    }
                    finally { if (e_1) throw e_1.error; }
                    return [7 /*endfinally*/];
                case 13: return [2 /*return*/];
            }
        });
    });
});
var createRelease = useSpinner_1.useSpinner('Creating release', function (_a) {
    var commitHash = _a.commitHash, recreate = _a.recreate, githubToken = _a.githubToken, gitRepoName = _a.gitRepoName, gitRepoOwner = _a.gitRepoOwner;
    return tslib_1.__awaiter(void 0, void 0, void 0, function () {
        var gitRelease, _b, _c;
        return tslib_1.__generator(this, function (_d) {
            switch (_d.label) {
                case 0:
                    _b = githubRelease_1.GitHubRelease.bind;
                    _c = [void 0, githubToken, gitRepoOwner, gitRepoName];
                    return [4 /*yield*/, releaseNotes()];
                case 1:
                    gitRelease = new (_b.apply(githubRelease_1.GitHubRelease, _c.concat([_d.sent(), commitHash])))();
                    return [2 /*return*/, gitRelease.release(recreate || false)];
            }
        });
    });
});
var githubPublishRunner = function (_a) {
    var dryrun = _a.dryrun, verbose = _a.verbose, commitHash = _a.commitHash, recreate = _a.recreate;
    return tslib_1.__awaiter(void 0, void 0, void 0, function () {
        var parsedUrl, githubToken;
        return tslib_1.__generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    if (!process.env['CIRCLE_REPOSITORY_URL']) {
                        throw "The release plugin requires you specify the repository url as environment variable CIRCLE_REPOSITORY_URL";
                    }
                    if (!process.env['GITHUB_TOKEN']) {
                        throw "Github publish requires that you set the environment variable GITHUB_TOKEN to a valid github api token.\n    See: https://github.com/settings/tokens for more details.";
                    }
                    parsedUrl = gitUrlParse(process.env['CIRCLE_REPOSITORY_URL']);
                    githubToken = process.env['GITHUB_TOKEN'];
                    return [4 /*yield*/, prepareRelease({
                            dryrun: dryrun,
                            verbose: verbose,
                        })];
                case 1:
                    _b.sent();
                    return [4 /*yield*/, createRelease({
                            commitHash: commitHash,
                            recreate: recreate,
                            githubToken: githubToken,
                            gitRepoOwner: parsedUrl.owner,
                            gitRepoName: parsedUrl.name,
                        })];
                case 2:
                    _b.sent();
                    return [2 /*return*/];
            }
        });
    });
};
exports.githubPublishTask = new task_1.Task('Github Publish', githubPublishRunner);
//# sourceMappingURL=plugin.utils.js.map