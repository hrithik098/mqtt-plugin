"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var launcher_1 = require("./launcher");
var login_1 = require("./login");
var createDashboardPage_1 = require("./pages/dashboards/createDashboardPage");
var dataSources_1 = require("./pages/datasources/dataSources");
exports.e2eScenario = function (_a) {
    var describeName = _a.describeName, itName = _a.itName, scenario = _a.scenario, _b = _a.skipScenario, skipScenario = _b === void 0 ? false : _b, _c = _a.createTestDataSource, createTestDataSource = _c === void 0 ? false : _c, _d = _a.createTestDashboard, createTestDashboard = _d === void 0 ? false : _d;
    describe(describeName, function () {
        if (skipScenario) {
            it.skip(itName, function () { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
                return tslib_1.__generator(this, function (_a) {
                    expect(false).toBe(true);
                    return [2 /*return*/];
                });
            }); });
            return;
        }
        var browser;
        var page;
        var testDataSourceName;
        var testDashboardTitle;
        var dashboardPage;
        beforeAll(function () { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, launcher_1.launchBrowser()];
                    case 1:
                        browser = _a.sent();
                        return [4 /*yield*/, browser.newPage()];
                    case 2:
                        page = _a.sent();
                        return [4 /*yield*/, login_1.ensureLoggedIn(page)];
                    case 3:
                        _a.sent();
                        if (!createTestDataSource) return [3 /*break*/, 5];
                        return [4 /*yield*/, dataSources_1.addTestDataSourceAndVerify(page)];
                    case 4:
                        testDataSourceName = _a.sent();
                        _a.label = 5;
                    case 5:
                        if (!createTestDashboard) return [3 /*break*/, 7];
                        testDashboardTitle = "e2e - " + new Date().getTime();
                        return [4 /*yield*/, createDashboardPage_1.createEmptyDashboardPage(page, testDashboardTitle)];
                    case 6:
                        dashboardPage = _a.sent();
                        _a.label = 7;
                    case 7: return [2 /*return*/];
                }
            });
        }); });
        afterAll(function () { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!testDataSourceName) return [3 /*break*/, 2];
                        return [4 /*yield*/, dataSources_1.cleanUpTestDataSource(page, testDataSourceName)];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2:
                        if (!(testDashboardTitle && dashboardPage)) return [3 /*break*/, 4];
                        return [4 /*yield*/, createDashboardPage_1.cleanDashboard(page, testDashboardTitle)];
                    case 3:
                        _a.sent();
                        _a.label = 4;
                    case 4:
                        if (!browser) return [3 /*break*/, 6];
                        return [4 /*yield*/, browser.close()];
                    case 5:
                        _a.sent();
                        _a.label = 6;
                    case 6: return [2 /*return*/];
                }
            });
        }); });
        it(itName, function () { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, scenario(browser, page, testDataSourceName, dashboardPage)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        }); });
    });
};
//# sourceMappingURL=scenario.js.map