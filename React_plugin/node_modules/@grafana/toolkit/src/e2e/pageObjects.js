"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var Selector = /** @class */ (function () {
    function Selector() {
    }
    Selector.fromAriaLabel = function (selector) {
        return "[aria-label=\"" + selector + "\"]";
    };
    Selector.fromSwitchLabel = function (selector) {
        return Selector.fromAriaLabel(selector) + " .gf-form-switch input";
    };
    Selector.fromSelector = function (selector) {
        return selector;
    };
    return Selector;
}());
exports.Selector = Selector;
var PageObject = /** @class */ (function () {
    function PageObject(selector) {
        var _this = this;
        this.selector = selector;
        this.init = function (page) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                this.page = page;
                return [2 /*return*/];
            });
        }); };
        this.exists = function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var options;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        console.log('Checking for existence of:', this.selector);
                        options = { visible: true };
                        return [4 /*yield*/, expect(this.page).not.toBeNull()];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, expect(this.page).toMatchElement(this.selector, options)];
                    case 2:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        }); };
        this.containsText = function (text) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var options;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        console.log("Checking for existence of '" + text + "' for:", this.selector);
                        options = { visible: true, text: text };
                        return [4 /*yield*/, expect(this.page).not.toBeNull()];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, expect(this.page).toMatchElement(this.selector, options)];
                    case 2:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        }); };
        this.containsPlaceholder = function (expectedPlaceholder) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var placeholder;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        console.log("Checking for placeholder '" + expectedPlaceholder + "' in:", this.selector);
                        return [4 /*yield*/, expect(this.page).not.toBeNull()];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, this.page.$eval(this.selector, function (input) { return input.placeholder; })];
                    case 2:
                        placeholder = _a.sent();
                        return [4 /*yield*/, expect(placeholder).toEqual(expectedPlaceholder)];
                    case 3:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        }); };
        this.hasLength = function (length) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var result;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        console.log('Checking for length of', this.selector);
                        return [4 /*yield*/, this.page.$$eval(this.selector, function (elements) { return elements.length; })];
                    case 1:
                        result = _a.sent();
                        return [4 /*yield*/, expect(result).toEqual(length)];
                    case 2:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        }); };
        this.containsTextAtPos = function (text, index) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var result;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        console.log("Checking for text " + text + " at position " + index + " of", this.selector);
                        return [4 /*yield*/, expect(this.page).not.toBeNull()];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, this.page.$$eval(this.selector, function (elements) { return elements.map(function (el) { return el.innerText; }); })];
                    case 2:
                        result = _a.sent();
                        return [4 /*yield*/, expect(result[index].trim()).toEqual(text)];
                    case 3:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        }); };
        this.click = function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        console.log('Trying to click on:', this.selector);
                        return [4 /*yield*/, expect(this.page).not.toBeNull()];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, expect(this.page).toClick(this.selector)];
                    case 2:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        }); };
        this.clickAtPos = function (index) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var elements, element;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        console.log("Trying to clicking at position:" + index + " on:", this.selector);
                        return [4 /*yield*/, expect(this.page).not.toBeNull()];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, this.page.$$(this.selector)];
                    case 2:
                        elements = _a.sent();
                        return [4 /*yield*/, elements[index]];
                    case 3:
                        element = _a.sent();
                        return [4 /*yield*/, element.click()];
                    case 4:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        }); };
        this.toggle = function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var switchSelector;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        switchSelector = this.selector.replace(' .gf-form-switch input', '');
                        console.log('Trying to toggle:', switchSelector);
                        return [4 /*yield*/, expect(this.page).not.toBeNull()];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, expect(this.page).toClick(switchSelector)];
                    case 2:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        }); };
        this.enter = function (text) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        console.log("Trying to enter text:" + text + " into:", this.selector);
                        return [4 /*yield*/, expect(this.page).not.toBeNull()];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, expect(this.page).toFill(this.selector, text)];
                    case 2:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        }); };
        this.select = function (text) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        console.log("Trying to select text:" + text + " in dropdown:", this.selector);
                        return [4 /*yield*/, expect(this.page).not.toBeNull()];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, this.page.select(this.selector, text)];
                    case 2:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        }); };
        this.selectedTextIs = function (text) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var selectedText;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        console.log("Trying to get selected text from dropdown:", this.selector);
                        return [4 /*yield*/, expect(this.page).not.toBeNull()];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, this.page.$eval(this.selector, function (select) {
                                if (select.selectedIndex === -1) {
                                    return '';
                                }
                                return select.options[select.selectedIndex].innerText;
                            })];
                    case 2:
                        selectedText = _a.sent();
                        return [4 /*yield*/, expect(selectedText).toEqual(text)];
                    case 3:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        }); };
        this.waitForSelector = function (timeoutInMs) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        console.log('Waiting for', this.selector);
                        return [4 /*yield*/, expect(this.page).not.toBeNull()];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, this.page.waitForSelector(this.selector, { timeout: timeoutInMs || 1000 })];
                    case 2:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        }); };
        this.isSwitchedOn = function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var checked;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getChecked()];
                    case 1:
                        checked = _a.sent();
                        return [4 /*yield*/, expect(checked).toBe(true)];
                    case 2:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        }); };
        this.isSwitchedOff = function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var checked;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getChecked()];
                    case 1:
                        checked = _a.sent();
                        return [4 /*yield*/, expect(checked).toBe(false)];
                    case 2:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        }); };
        this.blur = function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        console.log('Trying to blur:', this.selector);
                        return [4 /*yield*/, expect(this.page).not.toBeNull()];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, this.page.$eval(this.selector, function (input) { return input.blur(); })];
                    case 2:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        }); };
        this.getChecked = function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        console.log('Trying get switch status for:', this.selector);
                        return [4 /*yield*/, expect(this.page).not.toBeNull()];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, this.page.$eval(this.selector, function (input) { return input.checked; })];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        }); };
    }
    return PageObject;
}());
exports.PageObject = PageObject;
//# sourceMappingURL=pageObjects.js.map