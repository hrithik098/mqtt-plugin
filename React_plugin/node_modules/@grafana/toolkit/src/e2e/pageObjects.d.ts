import { Page } from 'puppeteer-core';
export declare class Selector {
    static fromAriaLabel: (selector: string) => string;
    static fromSwitchLabel: (selector: string) => string;
    static fromSelector: (selector: string) => string;
}
export interface PageObjectType {
    init: (page: Page) => Promise<void>;
    exists: () => Promise<void>;
    containsText: (text: string) => Promise<void>;
    waitForSelector: (timeoutInMs?: number) => Promise<void>;
}
export interface ClickablePageObjectType extends PageObjectType {
    click: () => Promise<void>;
}
export interface InputPageObjectType extends PageObjectType {
    enter: (text: string) => Promise<void>;
    containsPlaceholder: (text: string) => Promise<void>;
    blur: () => Promise<void>;
}
export interface SelectPageObjectType extends PageObjectType {
    select: (text: string) => Promise<void>;
    selectedTextIs: (text: string) => Promise<void>;
}
export interface SwitchPageObjectType extends PageObjectType {
    toggle: () => Promise<void>;
    isSwitchedOn: () => Promise<void>;
    isSwitchedOff: () => Promise<void>;
}
export interface ArrayPageObjectType {
    hasLength: (length: number) => Promise<void>;
    clickAtPos: (index: number) => Promise<void>;
    containsTextAtPos: (text: string, index: number) => Promise<void>;
    waitForSelector: (timeoutInMs?: number) => Promise<void>;
}
export declare class PageObject implements PageObjectType, ClickablePageObjectType, InputPageObjectType, SelectPageObjectType, SwitchPageObjectType, ArrayPageObjectType {
    protected selector: string;
    protected page?: Page;
    constructor(selector: string);
    init: (page: Page) => Promise<void>;
    exists: () => Promise<void>;
    containsText: (text: string) => Promise<void>;
    containsPlaceholder: (expectedPlaceholder: string) => Promise<void>;
    hasLength: (length: number) => Promise<void>;
    containsTextAtPos: (text: string, index: number) => Promise<void>;
    click: () => Promise<void>;
    clickAtPos: (index: number) => Promise<void>;
    toggle: () => Promise<void>;
    enter: (text: string) => Promise<void>;
    select: (text: string) => Promise<void>;
    selectedTextIs: (text: string) => Promise<void>;
    waitForSelector: (timeoutInMs?: number | undefined) => Promise<void>;
    isSwitchedOn: () => Promise<void>;
    isSwitchedOff: () => Promise<void>;
    blur: () => Promise<void>;
    private getChecked;
}
