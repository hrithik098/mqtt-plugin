"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var pageInfo_1 = require("../../pageInfo");
exports.dashboardPage = new pageInfo_1.TestPage({
    pageObjects: {
        settings: 'Dashboard settings navbar button',
        submenuItemLabel: 'Dashboard template variables submenu LabelName label',
        submenuItemValueDropDownValueLink: 'Dashboard template variables Variable Value DropDown value link',
        submenuItemValueDropDownDropDown: 'Dashboard template variables Variable Value DropDown DropDown',
        submenuItemValueDropDownSelectedLink: 'Dashboard template variables Variable Value DropDown Selected link',
        submenuItemValueDropDownOptionText: 'Dashboard template variables Variable Value DropDown option text',
    },
});
exports.assertVariableLabelsAndComponents = function (page, args) { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
    var index, _a, label, options, optionIndex;
    return tslib_1.__generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                console.log('Asserting variable components and labels');
                return [4 /*yield*/, page.pageObjects.submenuItemLabel.waitForSelector()];
            case 1:
                _b.sent();
                return [4 /*yield*/, page.pageObjects.submenuItemLabel.hasLength(args.length)];
            case 2:
                _b.sent();
                return [4 /*yield*/, page.pageObjects.submenuItemValueDropDownValueLink.hasLength(args.length)];
            case 3:
                _b.sent();
                index = 0;
                _b.label = 4;
            case 4:
                if (!(index < args.length)) return [3 /*break*/, 13];
                _a = args[index], label = _a.label, options = _a.options;
                return [4 /*yield*/, page.pageObjects.submenuItemLabel.containsTextAtPos(label, index)];
            case 5:
                _b.sent();
                return [4 /*yield*/, page.pageObjects.submenuItemValueDropDownValueLink.containsTextAtPos(options[1], index)];
            case 6:
                _b.sent();
                return [4 /*yield*/, page.pageObjects.submenuItemValueDropDownValueLink.clickAtPos(index)];
            case 7:
                _b.sent();
                return [4 /*yield*/, page.pageObjects.submenuItemValueDropDownOptionText.hasLength(options.length)];
            case 8:
                _b.sent();
                optionIndex = 0;
                _b.label = 9;
            case 9:
                if (!(optionIndex < options.length)) return [3 /*break*/, 12];
                return [4 /*yield*/, page.pageObjects.submenuItemValueDropDownOptionText.containsTextAtPos(options[optionIndex], optionIndex)];
            case 10:
                _b.sent();
                _b.label = 11;
            case 11:
                optionIndex++;
                return [3 /*break*/, 9];
            case 12:
                index++;
                return [3 /*break*/, 4];
            case 13:
                console.log('Asserting variable components and labels, Ok');
                return [2 /*return*/];
        }
    });
}); };
//# sourceMappingURL=dashboardPage.js.map