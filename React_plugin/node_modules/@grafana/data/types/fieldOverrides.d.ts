import { ComponentType } from 'react';
import { MatcherConfig, FieldConfig, Field, DataFrame, VariableSuggestionsScope, VariableSuggestion } from '../types';
import { Registry, RegistryItem } from '../utils';
import { InterpolateFunction } from './panel';
export interface DynamicConfigValue {
    prop: string;
    value?: any;
    custom?: boolean;
}
export interface ConfigOverrideRule {
    matcher: MatcherConfig;
    properties: DynamicConfigValue[];
}
export interface FieldConfigSource {
    defaults: FieldConfig;
    overrides: ConfigOverrideRule[];
}
export interface FieldConfigEditorProps<TValue, TSettings> {
    item: FieldPropertyEditorItem<TValue, TSettings>;
    value: TValue;
    context: FieldOverrideContext;
    onChange: (value?: TValue) => void;
}
export interface FieldOverrideContext {
    field?: Field;
    dataFrameIndex?: number;
    data: DataFrame[];
    replaceVariables?: InterpolateFunction;
    getSuggestions?: (scope?: VariableSuggestionsScope) => VariableSuggestion[];
}
export interface FieldOverrideEditorProps<TValue, TSettings> {
    item: FieldPropertyEditorItem<TValue, TSettings>;
    value: TValue;
    context: FieldOverrideContext;
    onChange: (value?: any) => void;
}
export interface FieldPropertyEditorItem<TValue = any, TSettings = any> extends RegistryItem {
    editor: ComponentType<FieldConfigEditorProps<TValue, TSettings>>;
    override: ComponentType<FieldOverrideEditorProps<TValue, TSettings>>;
    process: (value: any, context: FieldOverrideContext, settings: TSettings) => TValue;
    settings: TSettings;
    shouldApply: (field: Field) => boolean;
}
export declare type FieldConfigEditorRegistry = Registry<FieldPropertyEditorItem>;
