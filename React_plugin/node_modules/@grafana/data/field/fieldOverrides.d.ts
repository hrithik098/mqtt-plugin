import { GrafanaTheme, FieldConfig, InterpolateFunction, DataFrame, FieldConfigSource, TimeZone, FieldConfigEditorRegistry, FieldOverrideContext } from '../types';
interface GlobalMinMax {
    min: number;
    max: number;
}
export interface ApplyFieldOverrideOptions {
    data?: DataFrame[];
    fieldOptions: FieldConfigSource;
    replaceVariables: InterpolateFunction;
    theme: GrafanaTheme;
    timeZone?: TimeZone;
    autoMinMax?: boolean;
    standard?: FieldConfigEditorRegistry;
    custom?: FieldConfigEditorRegistry;
}
export declare function findNumericFieldMinMax(data: DataFrame[]): GlobalMinMax;
/**
 * Return a copy of the DataFrame with all rules applied
 */
export declare function applyFieldOverrides(options: ApplyFieldOverrideOptions): DataFrame[];
export interface FieldOverrideEnv extends FieldOverrideContext {
    custom?: FieldConfigEditorRegistry;
}
export declare function setFieldConfigDefaults(config: FieldConfig, defaults: FieldConfig, context: FieldOverrideEnv): void;
/**
 * This checks that all options on FieldConfig make sense.  It mutates any value that needs
 * fixed.  In particular this makes sure that the first threshold value is -Infinity (not valid in JSON)
 */
export declare function validateFieldConfig(config: FieldConfig): void;
export {};
